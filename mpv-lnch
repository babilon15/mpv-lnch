#!/usr/bin/python3

from string import digits, punctuation, whitespace
from subprocess import Popen, DEVNULL
from collections import namedtuple
from os import getenv, listdir
from shlex import split
import os.path
import curses
import signal

signal.signal(signal.SIGCHLD, signal.SIG_IGN)

NO_MODULE_NATSORT = False

try:
    from natsort import os_sorted
except ModuleNotFoundError:
    NO_MODULE_NATSORT = True

FdItem = namedtuple("FdItem", ["is_dir", "full", "name", "ext", "hidden"])

IGNORED_DIRNAME = ("lost+found", ".git", "root")

SPACE_CH = chr(32)

AUDIO_EXTS = ("aac", "flac", "m4a", "mp3", "ogg", "wav", "wma")
VIDEO_EXTS = ("avi", "iso", "mkv", "mov", "mp4", "webm", "wmv")
SUB_EXTS = ("ass", "idx", "lrc", "srt", "sub", "vtt")
OTHER_EXTS = ("cue", "m3u", "m3u8")

DEF_FILTER_EXTENSIONS = (
    *AUDIO_EXTS,
    *VIDEO_EXTS,
    *SUB_EXTS,
    *OTHER_EXTS,
)

ENV_MPVL_MPV_CMD = getenv("MPVL_MPV_CMD", "mpv --force-window")
ENV_MPVL_HOME = getenv("MPVL_HOME", ".")
ENV_MPVL_BM_F1 = getenv("MPVL_BM_F1", ".")
ENV_MPVL_BM_F2 = getenv("MPVL_BM_F2", ".")
ENV_MPVL_BM_F3 = getenv("MPVL_BM_F3", ".")
ENV_MPVL_BM_F4 = getenv("MPVL_BM_F4", ".")

MPV_SUB_FILE_OPTION = "--sub-file="
MPV_DVD_ISO_OPTION = "dvd:// --dvd-device="
MPV_BD_ISO_OPTION = "bd:// --bluray-device="


def exec_nonblocking(cmd):
    p = Popen(
        split(cmd),
        stdin=DEVNULL,
        stdout=DEVNULL,
        stderr=DEVNULL,
        start_new_session=True,
    )
    return p.pid


def mpv_open(path, sub_path=""):
    cmd = [ENV_MPVL_MPV_CMD]
    if sub_path:
        cmd.append("".join((MPV_SUB_FILE_OPTION, '"', sub_path, '"')))
    cmd.append("".join(('"', path, '"')))
    return exec_nonblocking(SPACE_CH.join(cmd))


def mpv_open_iso(path):
    pass


def get_filename_ext(name):
    _, ext = os.path.splitext(name)
    return ext.lstrip(".")


def is_hidden_by_filename(name):
    try:
        return name[0] == "."
    except IndexError:
        return False


def repeat_string(string, num, between=""):
    return between.join([string for x in range(num)])


def fixed_len_slice(inpt, max_len, offset=0):
    inpt_len = len(inpt)
    offset = max(0, min(offset, inpt_len - max_len))
    if inpt_len <= max_len:
        return inpt
    return inpt[offset : max_len + offset]


def fixed_len_str(
    string,
    max_len,
    offset=0,
    extends=False,
    extends_ch=SPACE_CH,
    extends_left=False,
):
    out = fixed_len_slice(string, max_len, offset)
    out_len = len(out)
    if out_len < max_len and extends:
        if extends_left:
            return "".join((repeat_string(extends_ch, max_len - out_len), out))
        return "".join((out, repeat_string(extends_ch, max_len - out_len)))
    return out


def is_filter_ch(ch):
    return ch.isalpha() or ch == SPACE_CH or ch in list(digits) or ch in list(punctuation)


def search_by_words(term, text):
    term = term.upper()
    text = text.upper()
    term_list = term.split(SPACE_CH)
    term_list_len = len(term_list)
    hit = 0
    for w in term_list:
        if w.strip(whitespace) in text:
            hit += 1
    return term_list_len == hit


class Navigation:
    def __init__(self, path="."):
        self.path = os.path.abspath(path)
        self.prev_path = self.path
        self.home = self.path

        self.filter_hidden = False
        self.filter_exts = []
        self.filter_text = ""

        self.fd_list = []
        self.fd_list_filtered = []

    def refresh_fd_list(self):
        self.fd_list *= 0
        try:
            fd_temp = listdir(self.path)
        except PermissionError:
            return
        except FileNotFoundError:
            return
        except NotADirectoryError:
            return
        if NO_MODULE_NATSORT:
            fd_temp.sort()
        else:
            fd_temp = os_sorted(fd_temp)
        for name in fd_temp:
            full = os.path.join(self.path, name)
            self.fd_list.append(
                FdItem(
                    is_dir=os.path.isdir(full),
                    full=full,
                    name=name,
                    ext=get_filename_ext(name),
                    hidden=is_hidden_by_filename(name),
                )
            )

    def refresh_fd_list_filtered(self):
        self.fd_list_filtered *= 0
        for item in self.fd_list:
            if item.name in IGNORED_DIRNAME:
                continue
            if not self.filter_hidden and item.hidden:
                continue
            if self.filter_exts and not item.is_dir and item.ext not in self.filter_exts:
                continue
            if self.filter_text and not search_by_words(self.filter_text, item.name):
                continue
            self.fd_list_filtered.append(item)

    def refresh(self):
        self.refresh_fd_list()
        self.refresh_fd_list_filtered()

    def reset_filter_text(self):
        self.filter_text *= 0

    def cd(self, name):
        self.prev_path = self.path
        self.path = os.path.abspath(os.path.join(self.path, name))

    def up(self):
        self.cd("..")

    def cd_home(self):
        self.path = self.home
        self.prev_path = self.home

    def index_fd_list_filtered(self, name):
        i = -1
        for c, item in enumerate(self.fd_list_filtered):
            if name == item.name:
                i = c
        return i

    def path_overwrite(self, path):
        path = os.path.abspath(path)
        if os.path.isdir(path):
            self.path, self.prev_path = path, path


class App:
    def __init__(self):
        self.window = curses.initscr()
        self.window.keypad(True)
        curses.curs_set(0)
        curses.noecho()
        curses.start_color()
        curses.use_default_colors()

        try:
            # STATUS LINE:
            curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
            # FILTER PROMPT:
            curses.init_pair(2, curses.COLOR_BLACK, curses.COLOR_YELLOW)
            curses.init_pair(3, 10, -1)  # FILE
            curses.init_pair(4, 12, -1)  # DIR

            curses.init_pair(5, curses.COLOR_BLACK, 10)  # FILE
            curses.init_pair(6, curses.COLOR_BLACK, 12)  # DIR
        except ValueError:
            curses.init_pair(3, -1, -1)
            curses.init_pair(4, -1, -1)
            curses.init_pair(5, curses.COLOR_BLACK, curses.COLOR_WHITE)
            curses.init_pair(6, curses.COLOR_BLACK, curses.COLOR_WHITE)

        self.navi = Navigation(ENV_MPVL_HOME)
        self.navi.filter_exts = DEF_FILTER_EXTENSIONS
        self.navi.refresh()

        self.cur_i, self.ch_offset = 0, 0
        self.last_item = None
        self.sub_path = ""

    def cur_i_rectify(self):
        fd_list_filtered_len = len(self.navi.fd_list_filtered)
        if self.cur_i < 0:
            self.cur_i = fd_list_filtered_len - 1
        elif self.cur_i > fd_list_filtered_len - 1:
            self.cur_i = 0
        else:
            pass

    def get_current_item(self):
        try:
            return self.navi.fd_list_filtered[self.cur_i]
        except IndexError:
            return None

    def draw(self):
        self.window.erase()

        status_line = [self.navi.path]
        if self.navi.filter_hidden:
            status_line.append("[H]")
        if self.sub_path:
            status_line.append("[SUB]")
        if not self.navi.fd_list_filtered:
            status_line.append("[EMPTY]")
        self.window.addstr(
            0,
            0,
            fixed_len_str((2 * SPACE_CH).join(status_line), curses.COLS, 1000, True),
            curses.color_pair(1),
        )

        cur_y = curses.LINES // 2
        neg_c = cur_y - 1
        top_slice = self.navi.fd_list_filtered[: self.cur_i]
        top_slice.reverse()
        for item in top_slice:
            self.window.addstr(
                neg_c,
                0,
                fixed_len_str(
                    "".join((item.name, "/")) if item.is_dir else item.name,
                    curses.COLS,
                    self.ch_offset,
                ),
                curses.color_pair(4) if item.is_dir else curses.color_pair(3),
            )
            neg_c -= 1
            if neg_c == 0:
                break

        item = self.get_current_item()
        if not isinstance(item, type(None)):
            self.window.addstr(
                cur_y,
                0,
                fixed_len_str(
                    "".join((item.name, "/")) if item.is_dir else item.name,
                    curses.COLS,
                    self.ch_offset,
                    True,
                ),
                curses.color_pair(6) if item.is_dir else curses.color_pair(5),
            )

        pos_c = cur_y + 1
        for item in self.navi.fd_list_filtered[self.cur_i + 1 :]:
            self.window.addstr(
                pos_c,
                0,
                fixed_len_str(
                    "".join((item.name, "/")) if item.is_dir else item.name,
                    curses.COLS,
                    self.ch_offset,
                ),
                curses.color_pair(4) if item.is_dir else curses.color_pair(3),
            )
            pos_c += 1
            if pos_c == curses.LINES - 1:
                break

        self.window.addstr(curses.LINES - 1, 0, ":", curses.color_pair(2))
        try:
            self.window.addstr(
                curses.LINES - 1,
                1,
                fixed_len_str(self.navi.filter_text, curses.COLS - 1, 1000),
                curses.color_pair(2),
            )
        except curses.error:
            pass

        self.window.refresh()

    def loop(self):
        while 1:
            self.draw()
            if self.input():
                break
            self.cur_i_rectify()

    def input(self):
        wch = self.window.get_wch()

        if wch == curses.KEY_F12:
            return True
        elif wch == curses.KEY_F11:
            pass
        elif wch in (curses.KEY_F10, curses.KEY_HOME):
            self.navi.cd_home()
            self.navi.reset_filter_text()
            self.cur_i = 0
            self.navi.refresh()
        elif wch == curses.KEY_F9:
            self.ch_offset += 1
        elif wch == curses.KEY_F8:
            mpv_open(self.navi.path)
        elif wch == curses.KEY_F7:
            pass
        elif wch == curses.KEY_F6:
            self.navi.filter_hidden = not self.navi.filter_hidden
            self.cur_i = 0
            self.navi.refresh_fd_list_filtered()
        elif wch == curses.KEY_F5:
            self.cur_i, self.ch_offset = 0, 0
            self.navi.refresh()
        elif wch == curses.KEY_F4:
            self.navi.path_overwrite(ENV_MPVL_BM_F4)
            self.navi.reset_filter_text()
            self.cur_i = 0
            self.navi.refresh()
        elif wch == curses.KEY_F3:
            self.navi.path_overwrite(ENV_MPVL_BM_F3)
            self.navi.reset_filter_text()
            self.cur_i = 0
            self.navi.refresh()
        elif wch == curses.KEY_F2:
            self.navi.path_overwrite(ENV_MPVL_BM_F2)
            self.navi.reset_filter_text()
            self.cur_i = 0
            self.navi.refresh()
        elif wch == curses.KEY_F1:
            self.navi.path_overwrite(ENV_MPVL_BM_F1)
            self.navi.reset_filter_text()
            self.cur_i = 0
            self.navi.refresh()
        elif wch == curses.KEY_RESIZE:
            curses.update_lines_cols()
        elif wch == curses.KEY_UP:
            self.cur_i -= 1
        elif wch == curses.KEY_DOWN:
            self.cur_i += 1
        elif wch == curses.KEY_LEFT:
            self.navi.up()
            self.navi.reset_filter_text()
            self.navi.refresh()
            self.cur_i = self.navi.index_fd_list_filtered(os.path.basename(self.navi.prev_path))
            if self.cur_i == -1:
                self.cur_i = 0
        elif wch in (curses.KEY_RIGHT, curses.KEY_ENTER, "\n"):
            self.choose()
            self.navi.refresh()
        elif wch == curses.KEY_BACKSPACE:
            try:
                self.navi.filter_text = self.navi.filter_text[:-1]
            except IndexError:
                pass
            else:
                self.cur_i = 0
                self.navi.refresh_fd_list_filtered()
        elif wch in (curses.KEY_DC, curses.KEY_DL):
            self.navi.reset_filter_text()
            self.cur_i = 0
            self.navi.refresh_fd_list_filtered()
        else:
            wch_str = str(wch)

            if is_filter_ch(wch_str):
                self.navi.filter_text = "".join((self.navi.filter_text, wch_str))
                self.navi.refresh_fd_list_filtered()

    def select_sub(self, path):
        if self.sub_path:
            self.sub_path *= 0
        else:
            self.sub_path = path

    def choose(self):
        item = self.get_current_item()
        if isinstance(item, type(None)):
            return
        if item.is_dir:
            self.navi.cd(item.name)
            self.cur_i = 0
            self.navi.reset_filter_text()
        else:
            if item.ext in SUB_EXTS:
                self.select_sub(item.full)
                return
            mpv_open(item.full, self.sub_path)
            self.last_item = item

    def run(self):
        try:
            self.loop()
        except KeyboardInterrupt:
            pass
        finally:
            curses.endwin()


if __name__ == "__main__":
    app = App()
    app.run()
